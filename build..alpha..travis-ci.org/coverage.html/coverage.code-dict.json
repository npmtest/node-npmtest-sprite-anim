{"/home/travis/build/npmtest/node-npmtest-sprite-anim/test.js":"/* istanbul instrument in package npmtest_sprite_anim */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sprite-anim/lib.npmtest_sprite_anim.js":"/* istanbul instrument in package npmtest_sprite_anim */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_sprite_anim = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_sprite_anim = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-sprite-anim/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-sprite-anim && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_sprite_anim */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_sprite_anim\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_sprite_anim.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_sprite_anim.rollup.js'] =\n            local.assetsDict['/assets.npmtest_sprite_anim.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_sprite_anim.__dirname + '/lib.npmtest_sprite_anim.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-sprite-anim/node_modules/sprite-anim/src/SpriteAnim.js":"'use strict';\n\nvar defaultValues = require('./utils/default-values');\n\nvar TinyEmitter = require('tiny-emitter');\nvar inherits = require('inherits');\nvar Ticker = require('./Ticker');\n\nvar ticker = new Ticker();\n\nvar SpriteAnim = function(parser, renderer, options) {\n  options = options || {};\n\n  this.parser = parser;\n  this.renderer = renderer;\n\n  var defaultOptions = {\n    manualUpdate: false,\n    frameRate: 60,\n    loop: false,\n    yoyo: false,\n    numFrames: parser.numFrames\n  };\n\n  defaultValues(this, defaultOptions, options);\n\n  this.lastFrame = this.numFrames - 1;\n\n  this.enterFrameId = -1;\n  this.enterFrameCb = this.onEnterFrame.bind(this);\n\n  this.currentFrame = 0;\n  this.isPlaying = false;\n  this.reversed = false;\n  this.complete = false;\n\n  this.lastFrameTime = 0;\n  this.interval = 1000 / this.frameRate;\n\n  this.x = 0;\n  this.y = 0;\n\n  this.alpha = 1;\n\n  return this;\n};\n\ninherits(SpriteAnim, TinyEmitter);\n\nSpriteAnim.prototype.play = function() {\n  this.isPlaying = true;\n  this.complete = false;\n\n  if(!this.manualUpdate) {\n    this.enterFrameId = ticker.add(this.enterFrameCb);\n  }\n\n  return this;\n};\n\nSpriteAnim.prototype.pause = function() {\n  this.isPlaying = false;\n\n  if(!this.manualUpdate) {\n    ticker.remove(this.enterFrameId);\n  }\n\n  return this;\n};\n\nSpriteAnim.prototype.stop = function() {\n  this.pause();\n  this.currentFrame = 0;\n\n  return this;\n};\n\nSpriteAnim.prototype.gotoAndPlay = function(frame) {\n  this.currentFrame = frame;\n  this.complete = false;\n\n  if (!this.isPlaying) this.play();\n\n  return this;\n};\n\nSpriteAnim.prototype.gotoAndStop = function(frame) {\n  if (this.isPlaying) this.pause();\n  this.currentFrame = frame;\n\n  this.renderFrame();\n\n  return this;\n};\n\nSpriteAnim.prototype.nextFrame = function() {\n  this.currentFrame++;\n  if (this.currentFrame > this.lastFrame) this.currentFrame = this.lastFrame;\n  if (this.currentFrame >= this.lastFrame) this.complete = true;\n\n  return this;\n};\n\nSpriteAnim.prototype.prevFrame = function() {\n  this.currentFrame--;\n  if (this.currentFrame < 0) this.currentFrame = 0;\n  if (this.currentFrame <= 0) this.complete = true;\n\n  return this;\n};\n\nSpriteAnim.prototype.renderFrame = function() {\n  this.renderer.render(this.parser.frames[this.currentFrame], this);\n\n  return this;\n};\n\nSpriteAnim.prototype.dispose = function() {\n  this.stop();\n  this.off('complete').off('enterFrame');\n\n  return this;\n};\n\nSpriteAnim.prototype.onComplete = function() {\n  if (this.loop) {\n    if (this.yoyo) this.reversed = !this.reversed;\n\n    if (!this.reversed) this.gotoAndPlay(0);\n    else this.gotoAndPlay(this.lastFrame);\n  } else {\n    this.pause();\n  }\n\n  this.emit('complete');\n\n  return this;\n};\n\nSpriteAnim.prototype.onEnterFrame = function(timeStamp) {\n  if (timeStamp - this.lastFrameTime > this.interval || this.lastFrameTime === 0) {\n    this.lastFrameTime = timeStamp;\n\n    if (!this.manualUpdate) this.renderFrame();\n\n    if (this.complete) {\n      this.onComplete();\n      return;\n    }\n\n    if (this.isPlaying){\n      if (!this.reversed) this.nextFrame();\n      else this.prevFrame();\n    }\n\n    this.emit('enterFrame');\n  }\n\n  return this;\n};\n\nmodule.exports = SpriteAnim;\n\nmodule.exports.CanvasRenderer = require('./renderer/CanvasRenderer.js');\nmodule.exports.OffScreenCanvasRenderer = require('./renderer/OffScreenCanvasRenderer.js');\nmodule.exports.DOMRenderer = require('./renderer/DOMRenderer.js');\n\nmodule.exports.SimpleParser = require('./parser/SimpleParser.js');\nmodule.exports.JSONArrayParser = require('./parser/JSONArrayParser.js');\n","/home/travis/build/npmtest/node-npmtest-sprite-anim/node_modules/sprite-anim/src/utils/default-values.js":"module.exports = function(scope, defaultValues, values){\n  for (var key in defaultValues){\n    scope[key] = typeof values[key] !== 'undefined' ? values[key] : defaultValues[key];\n  }\n};","/home/travis/build/npmtest/node-npmtest-sprite-anim/node_modules/sprite-anim/src/Ticker.js":"'use strict';\n\nvar raf = require('raf');\n\nvar itemId = 0;\n\nvar Ticker = function(){\n  this.items = [];\n\n  this.isRunning = false;\n  this.tickId = -1;\n  this.tickCb = this.onTick.bind(this);\n};\n\nTicker.prototype.start = function() {\n  this.isRunning = true;\n  \n  this.tickId = raf(this.tickCb);\n};\n\nTicker.prototype.pause = function() {\n  this.isRunning = false;\n\n  raf.cancel(this.tickId);\n};\n\nTicker.prototype.add = function(callback) {\n  var id = itemId++;\n\n  this.items.push({\n    id: id,\n    cb: callback\n  });\n\n  if (!this.isRunning) this.start();\n\n  return id;\n};\n\nTicker.prototype.remove = function(id) {\n  var item;\n\n  for (var i = 0, n = this.items.length; i < n; i++){\n    if (this.items[i].id === id){\n      item = this.items.splice(i, 1)[0];\n      break;\n    }\n  }\n  \n  if (this.items.length === 0) this.pause();\n\n  return item;\n};\n\nTicker.prototype.onTick = function(timeStamp) {\n  this.tickId = raf(this.tickCb);\n  \n  for (var i = 0, n = this.items.length; i < n; i++){\n    if (this.items[i]) this.items[i].cb(timeStamp);\n  }\n};\n\nmodule.exports = Ticker;\n\n","/home/travis/build/npmtest/node-npmtest-sprite-anim/node_modules/sprite-anim/src/renderer/CanvasRenderer.js":"'use strict';\n\nvar defaultValues = require('../utils/default-values');\nvar isArray = require('../utils/is-array');\n\nvar CanvasRenderer = function(canvas, sprite, options){\n  options = options || {};\n\n  var defaultOptions = {\n    clearFrame: true\n  };\n\n  defaultValues(this, defaultOptions, options);\n\n  this.canvas = canvas;\n\n  if (isArray(sprite)){\n    this.sprites = sprite;\n  }else{\n    this.sprites = [sprite];\n  }\n\n  this.sprite = sprite;\n\n  this.context = canvas.getContext('2d');\n};\n\nCanvasRenderer.prototype.render = function(frame, animation) {\n  if (this.clearFrame) this.context.clearRect(0, 0, frame.width, frame.height);\n\n  this.context.globalAlpha = animation.alpha;\n\n  this.context.drawImage(\n    this.sprites[frame.spriteIndex],\n    frame.x,\n    frame.y,\n    frame.width,\n    frame.height,\n    animation.x,\n    animation.y,\n    frame.width,\n    frame.height\n   );\n};\n\nmodule.exports = CanvasRenderer;\n","/home/travis/build/npmtest/node-npmtest-sprite-anim/node_modules/sprite-anim/src/utils/is-array.js":"module.exports = function(obj){\n  return Object.prototype.toString.call(obj) === '[object Array]';\n};","/home/travis/build/npmtest/node-npmtest-sprite-anim/node_modules/sprite-anim/src/renderer/OffScreenCanvasRenderer.js":"'use strict';\n\nvar defaultValues = require('../utils/default-values');\n\nvar OffScreenCanvasRenderer = function(canvas, sprite, options){\n  options = options || {};\n\n  this.canvas = canvas;\n  this.sprite = sprite;\n\n  var defaultOptions = {\n    clearFrame: true\n  };\n\n  defaultValues(this, defaultOptions, options);\n  \n  this.buffer = document.createElement('canvas');\n  this.buffer.width = sprite.width;\n  this.buffer.height = sprite.height;\n\n  this.bufferContext = this.buffer.getContext('2d');\n  this.bufferContext.drawImage(sprite, 0, 0);\n\n  this.context = canvas.getContext('2d');\n};\n\nOffScreenCanvasRenderer.prototype.render = function(frame, animation) {\n  if (this.clearFrame) this.context.clearRect(0, 0, frame.width, frame.height);\n\n  this.context.globalAlpha = animation.alpha;\n  \n  this.context.putImageData(\n    this.bufferContext.getImageData(frame.x,frame.y,frame.width,frame.height),\n    animation.x,\n    animation.y,\n    0,\n    0,\n    frame.width,\n    frame.height\n   );\n};\n\nmodule.exports = OffScreenCanvasRenderer;","/home/travis/build/npmtest/node-npmtest-sprite-anim/node_modules/sprite-anim/src/renderer/DOMRenderer.js":"'use strict';\n\nvar isArray = require('../utils/is-array');\n\nvar DOMRenderer = function(element, options){\n  options = options || {};\n\n  this.element = element;\n\n  this.scaleFactor = options.scaleFactor || 1;\n  this.sprite = options.sprite;\n\n  this.spriteIndex = 0;\n  if (this.sprite) this.updateSprite();\n};\n\nDOMRenderer.prototype.updateSprite = function() {\n  var sprite;\n\n  if (isArray(this.sprite)){\n    sprite = this.sprite[this.spriteIndex];\n  }else{\n    sprite = this.sprite;\n  }\n\n  var spriteWidth = sprite.naturalWidth * this.scaleFactor;\n  var spriteHeight = sprite.naturalHeight * this.scaleFactor;\n\n  this.element.style.backgroundImage = 'url(' + sprite.src + ')';\n  this.element.style.backgroundSize = spriteWidth + 'px ' + spriteHeight + 'px';\n};\n\nDOMRenderer.prototype.render = function(frame) {\n  if (frame.spriteIndex !== this.spriteIndex){\n    this.spriteIndex = frame.spriteIndex;\n\n    this.updateSprite();\n  }\n\n  this.element.style.backgroundPosition = '-' + frame.x * this.scaleFactor + 'px -' + frame.y * this.scaleFactor + 'px';\n};\n\nmodule.exports = DOMRenderer;","/home/travis/build/npmtest/node-npmtest-sprite-anim/node_modules/sprite-anim/src/parser/SimpleParser.js":"'use strict';\n\nvar isArray = require('../utils/is-array');\n\nvar SimpleParser = function(sprite, frameSize, options){\n  this.frameSize = frameSize;\n\n  this.options = options || {};\n  this.scaleFactor = this.options.scaleFactor || 1;\n  this.numFrames = this.options.numFrames;\n\n  this.frames = [];\n\n  if (isArray(sprite)){\n    for (var i = 0, n = sprite.length; i < n; i++){\n      this.initSpriteFrames(sprite[i], i);\n    }\n  }else{\n    this.initSpriteFrames(sprite, 0);\n  }\n\n  if (!this.numFrames) this.numFrames = this.frames.length;\n};\n\nSimpleParser.prototype.initSpriteFrames = function(sprite, spriteIndex){\n  var spriteWidth = sprite.naturalWidth || sprite.width;\n  var spriteHeight = sprite.naturalHeight || sprite.height;\n\n  spriteWidth *= this.scaleFactor;\n  spriteHeight *= this.scaleFactor;\n\n  var numFramesX = Math.ceil(spriteWidth / this.frameSize.width);\n  var numFramesY = Math.ceil(spriteHeight / this.frameSize.height);\n\n  loopY: \n  for (var i = 0; i < numFramesY; i++) {\n\n    for (var j = 0; j < numFramesX; j++) {\n      this.frames.push({\n        x: j * this.frameSize.width,\n        y: i * this.frameSize.height,\n        index: this.frames.length,\n        width: this.frameSize.width,\n        height: this.frameSize.height,\n        spriteIndex: spriteIndex\n      });\n\n      if (this.frames.length === this.numFrames) break loopY;\n    }\n    \n  }\n};\n\nmodule.exports = SimpleParser;\n\n","/home/travis/build/npmtest/node-npmtest-sprite-anim/node_modules/sprite-anim/src/parser/JSONArrayParser.js":"'use strict';\n\nvar JSONArrayParser = function(data, scaleFactor){\n  scaleFactor = scaleFactor || 1;\n\n  this.frames = [];\n  this.numFrames = data.frames.length;\n\n  var frame;\n\n  for (var i = 0; i < this.numFrames; i++){\n    frame = data.frames[i].frame;\n\n    this.frames.push({\n      index: i,\n      x: frame.x * scaleFactor,\n      y: frame.y * scaleFactor,\n      width: frame.w * scaleFactor,\n      height: frame.h * scaleFactor\n    });\n  }\n};\n\nmodule.exports = JSONArrayParser;"}